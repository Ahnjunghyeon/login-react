// ---------- Api ---------- //
API = Application Programming Interface 
즉 프로그램 간 상호 작용을 위한 인터페이스를 정의하는 파일


// ---------- Auth ---------- //
Auth = Firebase에서 제공하는 인증서비스, 사용자의 로그인 로그아웃 회원가입 등.
google을 이용해서 로그인 하는경우 

예시 코드.
; import { getAuth, Auth } from "firebase/auth";

; const auth: Auth = getAuth();

; // 사용자 로그인
; auth.signInWithPopup(googleAuthProvider);

; // 사용자 로그아웃
; auth.signOut();



// ---------- Analytics ---------- //
Analytics = Firebase에서 제공하는 분석 서비스.
앱의 사용량, 이벤트추적, 사용자동작 등  추적하고 분석.
예를들어서 사용자가 어떤 페이지에 방문할 때의 이벤트를 기록

예시코드 
; import { getAnalytics, Analytics } from "firebase/analytics";

; const analytics: Analytics = getAnalytics();

; // 페이지 뷰 이벤트 추적
; analytics.logEvent("page_view", { page_path: "/home" });




// ---------- onAuthStateChanged ---------- //
onAuthStateChanged = 사용자의 로그인 상태가 변경될 때마다 
호출되는 콜백함수 등록하는 메서드

예를 들어, 사용자가 로그인하거나 
로그아웃할 때마다 해당 상태를 반영하는 경우:

예시 코드

; const unsubscribe = onAuthStateChanged(auth, (user) => {
;   if (user) {
;     // 사용자가 로그인한 상태
;     console.log("사용자가 로그인했습니다:", user.displayName);
;   } else {
;     // 사용자가 로그아웃한 상태
;     console.log("사용자가 로그아웃했습니다.");
;   }
; });




// ---------- this ---------- //
this = ?
js, type 스크립트에서 특정 객체를 가리키는 키워드임.
this를 사용하면 해당 클래스의 인스턴스를 참조가능.





// ---------- const ---------- //
const = ?
변수를 선언하는 코드이다
const myVariable = 10; 이렇게 myVariable이 10으로 선언이 되었으면

myVariable = 20; XXXXXX
위 처럼 재할당이 안됨

가능한 경우 예시 코드 
1.
const myArray = [1, 2, 3];
myArray.push(4); // 가능: 배열에 원소를 추가가능
console.log(myArray); // 출력: [1, 2, 3, 4]

2. 
const myObject = { name: 'John', age: 30 };
myObject.age = 31; // 가능: 객체의 속성 값을 변경할 수 있음
console.log(myObject); // 출력: { name: 'John', age: 31 }

// ---------- async ---------- //
async = ?
JavaScript 및 TypeScript에서 비동기 함수를 선언
( 비동기 = 여러 작업을 처리하도록 예약한 뒤 작업이 끝나면 결과를 받는 방식)
( 즉 비동기 함수는 실행이 완료될 때까지 기다리지 않고 다른 작업을 계속할 수 있도록 해줌)

1. 
async function myAsyncFunction() {
  // 비동기 작업을 수행하는 코드
}

2. 
const myAsyncFunction = async () => {
  // 비동기 작업을 수행하는 코드
};


async 함수 내부에서 await 키워드를 사용하여 비동기 작업의 완료를 기다릴 수 있음
await는 프라미스가 처리(resolve)되기를 기다리고, 처리되면 프라미스가 반환하는 값을 반환

예시를 보자면

async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}